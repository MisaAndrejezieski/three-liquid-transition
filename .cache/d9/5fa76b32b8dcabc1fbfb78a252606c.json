{"id":"../../node_modules/react-sizeme/dist/react-sizeme.js","dependencies":[{"name":"/Users/thomassanfourche/node_modules/react-sizeme/dist/react-sizeme.js.map","includedInParent":true,"mtime":1644093140236},{"name":"/Users/thomassanfourche/package.json","includedInParent":true,"mtime":1644093146903},{"name":"/Users/thomassanfourche/node_modules/react-sizeme/package.json","includedInParent":true,"mtime":1644093140157},{"name":"react","loc":{"line":5,"column":20,"index":151},"parent":"/Users/thomassanfourche/node_modules/react-sizeme/dist/react-sizeme.js","resolved":"/Users/thomassanfourche/node_modules/react/index.js"},{"name":"react-dom","loc":{"line":7,"column":39,"index":245},"parent":"/Users/thomassanfourche/node_modules/react-sizeme/dist/react-sizeme.js","resolved":"/Users/thomassanfourche/node_modules/react-dom/index.js"},{"name":"invariant","loc":{"line":8,"column":40,"index":300},"parent":"/Users/thomassanfourche/node_modules/react-sizeme/dist/react-sizeme.js","resolved":"/Users/thomassanfourche/node_modules/invariant/browser.js"},{"name":"throttle-debounce","loc":{"line":9,"column":31,"index":346},"parent":"/Users/thomassanfourche/node_modules/react-sizeme/dist/react-sizeme.js","resolved":"/Users/thomassanfourche/node_modules/throttle-debounce/index.umd.js"},{"name":"element-resize-detector","loc":{"line":10,"column":51,"index":419},"parent":"/Users/thomassanfourche/node_modules/react-sizeme/dist/react-sizeme.js","resolved":"/Users/thomassanfourche/node_modules/element-resize-detector/src/element-resize-detector.js"},{"name":"shallowequal","loc":{"line":11,"column":45,"index":493},"parent":"/Users/thomassanfourche/node_modules/react-sizeme/dist/react-sizeme.js","resolved":"/Users/thomassanfourche/node_modules/shallowequal/index.js"}],"generated":{"js":"'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = require('react');\nvar React__default = _interopDefault(React);\nvar ReactDOM = _interopDefault(require('react-dom'));\nvar invariant = _interopDefault(require('invariant'));\nvar throttleDebounce = require('throttle-debounce');\nvar createResizeDetector = _interopDefault(require('element-resize-detector'));\nvar isShallowEqual = _interopDefault(require('shallowequal'));\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nvar instances = {}; // Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\n\nfunction resizeDetector() {\n  var strategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'scroll';\n\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy: strategy\n    });\n  }\n\n  return instances[strategy];\n}\n\nvar errMsg = 'react-sizeme: an error occurred whilst stopping to listen to node size changes';\nvar defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  monitorPosition: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll'\n};\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\n\n\nvar ReferenceWrapper =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReferenceWrapper, _Component);\n\n  function ReferenceWrapper() {\n    _classCallCheck(this, ReferenceWrapper);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReferenceWrapper).apply(this, arguments));\n  }\n\n  _createClass(ReferenceWrapper, [{\n    key: \"render\",\n    value: function render() {\n      return React.Children.only(this.props.children);\n    }\n  }]);\n\n  return ReferenceWrapper;\n}(React.Component);\n\n_defineProperty(ReferenceWrapper, \"displayName\", 'SizeMeReferenceWrapper');\n\nfunction Placeholder(_ref) {\n  var className = _ref.className,\n      style = _ref.style;\n  // Lets create the props for the temp element.\n  var phProps = {}; // We will use any provided className/style or else make the temp\n  // container take the full available space.\n\n  if (!className && !style) {\n    phProps.style = {\n      width: '100%',\n      height: '100%'\n    };\n  } else {\n    if (className) {\n      phProps.className = className;\n    }\n\n    if (style) {\n      phProps.style = style;\n    }\n  }\n\n  return React__default.createElement(\"div\", phProps);\n}\n\nPlaceholder.displayName = 'SizeMePlaceholder';\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\n\nvar renderWrapper = function renderWrapper(WrappedComponent) {\n  function SizeMeRenderer(props) {\n    var explicitRef = props.explicitRef,\n        className = props.className,\n        style = props.style,\n        size = props.size,\n        disablePlaceholder = props.disablePlaceholder,\n        onSize = props.onSize,\n        restProps = _objectWithoutProperties(props, [\"explicitRef\", \"className\", \"style\", \"size\", \"disablePlaceholder\", \"onSize\"]);\n\n    var noSizeData = size == null || size.width == null && size.height == null && size.position == null;\n    var renderPlaceholder = noSizeData && !disablePlaceholder;\n    var renderProps = {\n      className: className,\n      style: style\n    };\n\n    if (size != null) {\n      renderProps.size = size;\n    }\n\n    var toRender = renderPlaceholder ? React__default.createElement(Placeholder, {\n      className: className,\n      style: style\n    }) : React__default.createElement(WrappedComponent, _extends({}, renderProps, restProps));\n    return React__default.createElement(ReferenceWrapper, {\n      ref: explicitRef\n    }, toRender);\n  }\n\n  SizeMeRenderer.displayName = \"SizeMeRenderer(\".concat(getDisplayName(WrappedComponent), \")\");\n  return SizeMeRenderer;\n};\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\n\n\nfunction withSize() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;\n  var _config$monitorWidth = config.monitorWidth,\n      monitorWidth = _config$monitorWidth === void 0 ? defaultConfig.monitorWidth : _config$monitorWidth,\n      _config$monitorHeight = config.monitorHeight,\n      monitorHeight = _config$monitorHeight === void 0 ? defaultConfig.monitorHeight : _config$monitorHeight,\n      _config$monitorPositi = config.monitorPosition,\n      monitorPosition = _config$monitorPositi === void 0 ? defaultConfig.monitorPosition : _config$monitorPositi,\n      _config$refreshRate = config.refreshRate,\n      refreshRate = _config$refreshRate === void 0 ? defaultConfig.refreshRate : _config$refreshRate,\n      _config$refreshMode = config.refreshMode,\n      refreshMode = _config$refreshMode === void 0 ? defaultConfig.refreshMode : _config$refreshMode,\n      _config$noPlaceholder = config.noPlaceholder,\n      noPlaceholder = _config$noPlaceholder === void 0 ? defaultConfig.noPlaceholder : _config$noPlaceholder,\n      _config$resizeDetecto = config.resizeDetectorStrategy,\n      resizeDetectorStrategy = _config$resizeDetecto === void 0 ? defaultConfig.resizeDetectorStrategy : _config$resizeDetecto;\n  invariant(monitorWidth || monitorHeight || monitorPosition, 'You have to monitor at least one of the width, height, or position when using \"sizeMe\"');\n  invariant(refreshRate >= 16, \"It is highly recommended that you don't put your refreshRate lower than \" + '16 as this may cause layout thrashing.');\n  invariant(refreshMode === 'throttle' || refreshMode === 'debounce', 'The refreshMode should have a value of \"throttle\" or \"debounce\"');\n  var refreshDelayStrategy = refreshMode === 'throttle' ? throttleDebounce.throttle : throttleDebounce.debounce;\n  return function WrapComponent(WrappedComponent) {\n    var SizeMeRenderWrapper = renderWrapper(WrappedComponent);\n\n    var SizeAwareComponent =\n    /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(SizeAwareComponent, _React$Component);\n\n      function SizeAwareComponent() {\n        var _getPrototypeOf2;\n\n        var _this;\n\n        _classCallCheck(this, SizeAwareComponent);\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SizeAwareComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n        _defineProperty(_assertThisInitialized(_this), \"domEl\", null);\n\n        _defineProperty(_assertThisInitialized(_this), \"state\", {\n          width: undefined,\n          height: undefined,\n          position: undefined\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"uninstall\", function () {\n          if (_this.domEl) {\n            try {\n              _this.detector.uninstall(_this.domEl);\n            } catch (err) {\n              // eslint-disable-next-line no-console\n              console.warn(errMsg);\n            }\n\n            _this.domEl = null;\n          }\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"determineStrategy\", function (props) {\n          if (props.onSize) {\n            if (!_this.callbackState) {\n              _this.callbackState = _objectSpread2({}, _this.state);\n            }\n\n            _this.strategy = 'callback';\n          } else {\n            _this.strategy = 'render';\n          }\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"strategisedSetState\", function (state) {\n          if (_this.strategy === 'callback') {\n            _this.callbackState = state;\n\n            _this.props.onSize(state);\n          }\n\n          _this.setState(state);\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"strategisedGetState\", function () {\n          return _this.strategy === 'callback' ? _this.callbackState : _this.state;\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"refCallback\", function (element) {\n          _this.element = element;\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"hasSizeChanged\", function (current, next) {\n          var c = current;\n          var n = next;\n          var cp = c.position || {};\n          var np = n.position || {};\n          return monitorWidth && c.width !== n.width || monitorHeight && c.height !== n.height || monitorPosition && (cp.top !== np.top || cp.left !== np.left || cp.bottom !== np.bottom || cp.right !== np.right);\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"checkIfSizeChanged\", refreshDelayStrategy(refreshRate, function (el) {\n          var _el$getBoundingClient = el.getBoundingClientRect(),\n              width = _el$getBoundingClient.width,\n              height = _el$getBoundingClient.height,\n              right = _el$getBoundingClient.right,\n              left = _el$getBoundingClient.left,\n              top = _el$getBoundingClient.top,\n              bottom = _el$getBoundingClient.bottom;\n\n          var next = {\n            width: monitorWidth ? width : null,\n            height: monitorHeight ? height : null,\n            position: monitorPosition ? {\n              right: right,\n              left: left,\n              top: top,\n              bottom: bottom\n            } : null\n          };\n\n          if (_this.hasSizeChanged(_this.strategisedGetState(), next)) {\n            _this.strategisedSetState(next);\n          }\n        }));\n\n        return _this;\n      }\n\n      _createClass(SizeAwareComponent, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          this.detector = resizeDetector(resizeDetectorStrategy);\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate() {\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          // Change our size checker to a noop just in case we have some\n          // late running events.\n          this.hasSizeChanged = function () {\n            return undefined;\n          };\n\n          this.checkIfSizeChanged = function () {\n            return undefined;\n          };\n\n          this.uninstall();\n        }\n      }, {\n        key: \"handleDOMNode\",\n        value: function handleDOMNode() {\n          var found = this.element && ReactDOM.findDOMNode(this.element);\n\n          if (!found) {\n            // If we previously had a dom node then we need to ensure that\n            // we remove any existing listeners to avoid memory leaks.\n            this.uninstall();\n            return;\n          }\n\n          if (!this.domEl) {\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          } else if (this.domEl.isSameNode && !this.domEl.isSameNode(found) || this.domEl !== found) {\n            this.uninstall();\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          }\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var disablePlaceholder = withSize.enableSSRBehaviour || withSize.noPlaceholders || noPlaceholder || this.strategy === 'callback';\n\n          var size = _objectSpread2({}, this.state);\n\n          return React__default.createElement(SizeMeRenderWrapper, _extends({\n            explicitRef: this.refCallback,\n            size: this.strategy === 'callback' ? null : size,\n            disablePlaceholder: disablePlaceholder\n          }, this.props));\n        }\n      }]);\n\n      return SizeAwareComponent;\n    }(React__default.Component);\n\n    _defineProperty(SizeAwareComponent, \"displayName\", \"SizeMe(\".concat(getDisplayName(WrappedComponent), \")\"));\n\n    SizeAwareComponent.WrappedComponent = WrappedComponent;\n    return SizeAwareComponent;\n  };\n}\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\n\n\nwithSize.enableSSRBehaviour = false;\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\n\nwithSize.noPlaceholders = false;\n\nvar SizeMe =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SizeMe, _Component);\n\n  function SizeMe(props) {\n    var _this;\n\n    _classCallCheck(this, SizeMe);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SizeMe).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"createComponent\", function (config) {\n      _this.SizeAware = withSize(config)(function (_ref) {\n        var children = _ref.children;\n        return children;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSize\", function (size) {\n      return _this.setState({\n        size: size\n      });\n    });\n\n    var _children = props.children,\n        render = props.render,\n        sizeMeConfig = _objectWithoutProperties(props, [\"children\", \"render\"]);\n\n    _this.createComponent(sizeMeConfig);\n\n    _this.state = {\n      size: {\n        width: undefined,\n        height: undefined\n      }\n    };\n    return _this;\n  }\n\n  _createClass(SizeMe, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          prevChildren = _this$props.children,\n          prevRender = _this$props.render,\n          currentSizeMeConfig = _objectWithoutProperties(_this$props, [\"children\", \"render\"]);\n\n      var nextChildren = prevProps.children,\n          nextRender = prevProps.render,\n          prevSizeMeConfig = _objectWithoutProperties(prevProps, [\"children\", \"render\"]);\n\n      if (!isShallowEqual(currentSizeMeConfig, prevSizeMeConfig)) {\n        this.createComponent(currentSizeMeConfig);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var SizeAware = this.SizeAware;\n      var render = this.props.children || this.props.render;\n      return React__default.createElement(SizeAware, {\n        onSize: this.onSize\n      }, render({\n        size: this.state.size\n      }));\n    }\n  }]);\n\n  return SizeMe;\n}(React.Component);\n\n_defineProperty(SizeMe, \"defaultProps\", {\n  children: undefined,\n  render: undefined\n});\n\nwithSize.SizeMe = SizeMe;\nwithSize.withSize = withSize;\n\nmodule.exports = withSize;\n\n"},"sourceMaps":{"js":{"version":3,"file":"react-sizeme.js","sources":["../src/resize-detector.js","../src/with-size.js","../src/component.js","../src/index.js"],"sourcesContent":["import createResizeDetector from 'element-resize-detector'\n\nconst instances = {}\n\n// Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\nfunction resizeDetector(strategy = 'scroll') {\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy,\n    })\n  }\n\n  return instances[strategy]\n}\n\nexport default resizeDetector\n","/* eslint-disable react/no-multi-comp */\n/* eslint-disable react/prop-types */\n/* eslint-disable react/require-default-props */\n/* eslint-disable react/no-find-dom-node */\n\nimport React, { Children, Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport invariant from 'invariant'\nimport { debounce, throttle } from 'throttle-debounce'\nimport resizeDetector from './resize-detector'\n\nconst errMsg =\n  'react-sizeme: an error occurred whilst stopping to listen to node size changes'\n\nconst defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  monitorPosition: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll',\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\nclass ReferenceWrapper extends Component {\n  static displayName = 'SizeMeReferenceWrapper'\n\n  render() {\n    return Children.only(this.props.children)\n  }\n}\n\nfunction Placeholder({ className, style }) {\n  // Lets create the props for the temp element.\n  const phProps = {}\n\n  // We will use any provided className/style or else make the temp\n  // container take the full available space.\n  if (!className && !style) {\n    phProps.style = { width: '100%', height: '100%' }\n  } else {\n    if (className) {\n      phProps.className = className\n    }\n    if (style) {\n      phProps.style = style\n    }\n  }\n\n  return <div {...phProps} />\n}\nPlaceholder.displayName = 'SizeMePlaceholder'\n\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\nconst renderWrapper = WrappedComponent => {\n  function SizeMeRenderer(props) {\n    const {\n      explicitRef,\n      className,\n      style,\n      size,\n      disablePlaceholder,\n      onSize,\n      ...restProps\n    } = props\n\n    const noSizeData =\n      size == null ||\n      (size.width == null && size.height == null && size.position == null)\n\n    const renderPlaceholder = noSizeData && !disablePlaceholder\n\n    const renderProps = {\n      className,\n      style,\n    }\n\n    if (size != null) {\n      renderProps.size = size\n    }\n\n    const toRender = renderPlaceholder ? (\n      <Placeholder className={className} style={style} />\n    ) : (\n      <WrappedComponent {...renderProps} {...restProps} />\n    )\n\n    return <ReferenceWrapper ref={explicitRef}>{toRender}</ReferenceWrapper>\n  }\n\n  SizeMeRenderer.displayName = `SizeMeRenderer(${getDisplayName(\n    WrappedComponent,\n  )})`\n\n  return SizeMeRenderer\n}\n\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\nfunction withSize(config = defaultConfig) {\n  const {\n    monitorWidth = defaultConfig.monitorWidth,\n    monitorHeight = defaultConfig.monitorHeight,\n    monitorPosition = defaultConfig.monitorPosition,\n    refreshRate = defaultConfig.refreshRate,\n    refreshMode = defaultConfig.refreshMode,\n    noPlaceholder = defaultConfig.noPlaceholder,\n    resizeDetectorStrategy = defaultConfig.resizeDetectorStrategy,\n  } = config\n\n  invariant(\n    monitorWidth || monitorHeight || monitorPosition,\n    'You have to monitor at least one of the width, height, or position when using \"sizeMe\"',\n  )\n\n  invariant(\n    refreshRate >= 16,\n    \"It is highly recommended that you don't put your refreshRate lower than \" +\n      '16 as this may cause layout thrashing.',\n  )\n\n  invariant(\n    refreshMode === 'throttle' || refreshMode === 'debounce',\n    'The refreshMode should have a value of \"throttle\" or \"debounce\"',\n  )\n\n  const refreshDelayStrategy = refreshMode === 'throttle' ? throttle : debounce\n\n  return function WrapComponent(WrappedComponent) {\n    const SizeMeRenderWrapper = renderWrapper(WrappedComponent)\n\n    class SizeAwareComponent extends React.Component {\n      static displayName = `SizeMe(${getDisplayName(WrappedComponent)})`\n\n      domEl = null\n\n      state = {\n        width: undefined,\n        height: undefined,\n        position: undefined,\n      }\n\n      componentDidMount() {\n        this.detector = resizeDetector(resizeDetectorStrategy)\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentDidUpdate() {\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentWillUnmount() {\n        // Change our size checker to a noop just in case we have some\n        // late running events.\n        this.hasSizeChanged = () => undefined\n        this.checkIfSizeChanged = () => undefined\n        this.uninstall()\n      }\n\n      uninstall = () => {\n        if (this.domEl) {\n          try {\n            this.detector.uninstall(this.domEl)\n          } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn(errMsg)\n          }\n          this.domEl = null\n        }\n      }\n\n      determineStrategy = props => {\n        if (props.onSize) {\n          if (!this.callbackState) {\n            this.callbackState = {\n              ...this.state,\n            }\n          }\n          this.strategy = 'callback'\n        } else {\n          this.strategy = 'render'\n        }\n      }\n\n      strategisedSetState = state => {\n        if (this.strategy === 'callback') {\n          this.callbackState = state\n          this.props.onSize(state)\n        }\n        this.setState(state)\n      }\n\n      strategisedGetState = () =>\n        this.strategy === 'callback' ? this.callbackState : this.state\n\n      handleDOMNode() {\n        const found = this.element && ReactDOM.findDOMNode(this.element)\n\n        if (!found) {\n          // If we previously had a dom node then we need to ensure that\n          // we remove any existing listeners to avoid memory leaks.\n          this.uninstall()\n          return\n        }\n\n        if (!this.domEl) {\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else if (\n          (this.domEl.isSameNode && !this.domEl.isSameNode(found)) ||\n          this.domEl !== found\n        ) {\n          this.uninstall()\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else {\n          // Do nothing 👍\n        }\n      }\n\n      refCallback = element => {\n        this.element = element\n      }\n\n      hasSizeChanged = (current, next) => {\n        const c = current\n        const n = next\n        const cp = c.position || {}\n        const np = n.position || {}\n\n        return (\n          (monitorWidth && c.width !== n.width) ||\n          (monitorHeight && c.height !== n.height) ||\n          (monitorPosition &&\n            (cp.top !== np.top ||\n              cp.left !== np.left ||\n              cp.bottom !== np.bottom ||\n              cp.right !== np.right))\n        )\n      }\n\n      checkIfSizeChanged = refreshDelayStrategy(refreshRate, el => {\n        const {\n          width,\n          height,\n          right,\n          left,\n          top,\n          bottom,\n        } = el.getBoundingClientRect()\n\n        const next = {\n          width: monitorWidth ? width : null,\n          height: monitorHeight ? height : null,\n          position: monitorPosition ? { right, left, top, bottom } : null,\n        }\n\n        if (this.hasSizeChanged(this.strategisedGetState(), next)) {\n          this.strategisedSetState(next)\n        }\n      })\n\n      render() {\n        const disablePlaceholder =\n          withSize.enableSSRBehaviour ||\n          withSize.noPlaceholders ||\n          noPlaceholder ||\n          this.strategy === 'callback'\n\n        const size = { ...this.state }\n\n        return (\n          <SizeMeRenderWrapper\n            explicitRef={this.refCallback}\n            size={this.strategy === 'callback' ? null : size}\n            disablePlaceholder={disablePlaceholder}\n            {...this.props}\n          />\n        )\n      }\n    }\n\n    SizeAwareComponent.WrappedComponent = WrappedComponent\n\n    return SizeAwareComponent\n  }\n}\n\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\nwithSize.enableSSRBehaviour = false\n\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\nwithSize.noPlaceholders = false\n\nexport default withSize\n","/* eslint-disable react/prop-types */\n\nimport React, { Component } from 'react'\nimport isShallowEqual from 'shallowequal'\nimport withSize from './with-size'\n\nexport default class SizeMe extends Component {\n  static defaultProps = {\n    children: undefined,\n    render: undefined,\n  }\n\n  constructor(props) {\n    super(props)\n    const { children, render, ...sizeMeConfig } = props\n    this.createComponent(sizeMeConfig)\n    this.state = {\n      size: {\n        width: undefined,\n        height: undefined,\n      },\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      children: prevChildren,\n      render: prevRender,\n      ...currentSizeMeConfig\n    } = this.props\n    const {\n      children: nextChildren,\n      render: nextRender,\n      ...prevSizeMeConfig\n    } = prevProps\n    if (!isShallowEqual(currentSizeMeConfig, prevSizeMeConfig)) {\n      this.createComponent(currentSizeMeConfig)\n    }\n  }\n\n  createComponent = config => {\n    this.SizeAware = withSize(config)(({ children }) => children)\n  }\n\n  onSize = size => this.setState({ size })\n\n  render() {\n    const { SizeAware } = this\n    const render = this.props.children || this.props.render\n    return (\n      <SizeAware onSize={this.onSize}>\n        {render({ size: this.state.size })}\n      </SizeAware>\n    )\n  }\n}\n","import withSize from './with-size'\nimport SizeMe from './component'\n\nwithSize.SizeMe = SizeMe\nwithSize.withSize = withSize\n\nexport default withSize\n"],"names":["instances","resizeDetector","strategy","createResizeDetector","errMsg","defaultConfig","monitorWidth","monitorHeight","monitorPosition","refreshRate","refreshMode","noPlaceholder","resizeDetectorStrategy","getDisplayName","WrappedComponent","displayName","name","ReferenceWrapper","Children","only","props","children","Component","Placeholder","className","style","phProps","width","height","React","renderWrapper","SizeMeRenderer","explicitRef","size","disablePlaceholder","onSize","restProps","noSizeData","position","renderPlaceholder","renderProps","toRender","withSize","config","invariant","refreshDelayStrategy","throttle","debounce","WrapComponent","SizeMeRenderWrapper","SizeAwareComponent","undefined","domEl","detector","uninstall","err","console","warn","callbackState","state","setState","element","current","next","c","n","cp","np","top","left","bottom","right","el","getBoundingClientRect","hasSizeChanged","strategisedGetState","strategisedSetState","determineStrategy","handleDOMNode","checkIfSizeChanged","found","ReactDOM","findDOMNode","listenTo","isSameNode","enableSSRBehaviour","noPlaceholders","refCallback","SizeMe","SizeAware","render","sizeMeConfig","createComponent","prevProps","prevChildren","prevRender","currentSizeMeConfig","nextChildren","nextRender","prevSizeMeConfig","isShallowEqual"],"mappings":"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"}},"error":null,"hash":"9d9b49f4f1f72793c90ee6163db3df61","cacheData":{"env":{}}}